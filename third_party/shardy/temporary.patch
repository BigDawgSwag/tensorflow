diff --git a/shardy/dialect/sdy/ir/test/tensor_sharding_verification.mlir b/shardy/dialect/sdy/ir/test/tensor_sharding_verification.mlir
index e7814d2..be932c8 100644
--- a/shardy/dialect/sdy/ir/test/tensor_sharding_verification.mlir
+++ b/shardy/dialect/sdy/ir/test/tensor_sharding_verification.mlir
@@ -494,16 +494,6 @@ func.func @sharding_bound_manual_computation(%arg0: tensor<16x32xf32>) -> tensor
 
 // -----
 
-sdy.mesh @maximal_mesh = <[], device_ids=[0]>
-
-func.func @maximal_sharding_with_dim_shardings(%arg0: tensor<8x8xf32>) -> tuple<tensor<8x8xf32>> {
-  // expected-error @+1 {{a maximal sharding must have no dimension shardings}}
-  %0 = stablehlo.custom_call @sdy_testonly(%arg0) {sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh, [{}, {}]>]>} : (tensor<8x8xf32>) -> tuple<tensor<8x8xf32>>
-  return %0 : tuple<tensor<8x8xf32>>
-}
-
-// -----
-
 sdy.mesh @mesh = <["a"=2]>
 
 func.func @two_tuple(%arg0: tensor<8x8xf32>) -> tuple<tensor<8x8xf32>, tensor<8x8xf32>> {
diff --git a/shardy/dialect/sdy/ir/verifiers.cc b/shardy/dialect/sdy/ir/verifiers.cc
index c392a84..d1b9a6a 100644
--- a/shardy/dialect/sdy/ir/verifiers.cc
+++ b/shardy/dialect/sdy/ir/verifiers.cc
@@ -231,15 +231,7 @@ LogicalResult verifyTensorShardingAttr(TensorShardingAttr shardingAttr,
                                        bool checkDivisibility,
                                        ManualAxisToOwner alreadyManualAxes) {
   if (mesh.isMaximal()) {
-    // A maximal sharding says that this op should be executed on a single
-    // device. Skip checking against the type of the op. Just make sure there
-    // are no dimension shardings and replicated axes.
-    if (!shardingAttr.getDimShardings().empty() ||
-        !shardingAttr.getReplicatedAxes().empty()) {
-      return emitError(
-          "a maximal sharding must have no dimension shardings and "
-          "no replicated axes.");
-    }
+    // TODO(bartchr): add some checks after XLA change lands.
     return success();
   }
   auto tensorType = dyn_cast<ShapedType>(type);
diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index b1fe52b..a239dff 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,28 +1,12 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp b/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp
---- a/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp
-+++ b/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp
-@@ -654,8 +654,10 @@
-       // There is a potential that the model could be adversarial and
-       // continually evict live ranges over and over again, leading to a
-       // large amount of compile time being spent in regalloc. If we hit the
--      // threshold, prevent the range from being evicted.
--      if (IntfCascade >= MaxCascade)
-+      // threshold, prevent the range from being evicted. We still let the
-+      // range through if it is urgent as we are required to produce an
-+      // eviction if the candidate is not spillable.
-+      if (IntfCascade >= MaxCascade && !Urgent)
-         return false;
- 
-       // Only evict older cascades or live ranges without a cascade.
 diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/NVPTX/nvcl-param-align.ll b/llvm/test/CodeGen/NVPTX/nvcl-param-align.ll
 --- a/llvm/test/CodeGen/NVPTX/nvcl-param-align.ll
 +++ b/llvm/test/CodeGen/NVPTX/nvcl-param-align.ll
 @@ -1,5 +1,5 @@
--; RUN: llc < %s -mtriple=nvptx64 -mcpu=sm_20 | FileCheck %s
--; RUN: %if ptxas %{ llc < %s -mtriple=nvptx64 -mcpu=sm_20 | %ptxas-verify %}
-+; RUN: llc < %s -mtriple=nvptx64-nvidia-nvcl -mcpu=sm_20 | FileCheck %s
-+; RUN: %if ptxas %{ llc < %s -mtriple=nvptx64-nvidia-nvcl -mcpu=sm_20 | %ptxas-verify %}
+-; RUN: llc < %s -mtriple=nvptx64-nvidia-nvcl -mcpu=sm_20 | FileCheck %s
+-; RUN: %if ptxas %{ llc < %s -mtriple=nvptx64-nvidia-nvcl -mcpu=sm_20 | %ptxas-verify %}
++; RUN: llc < %s -mtriple=nvptx64-nvidia-nvcl -mcpu=sm_60 | FileCheck %s
++; RUN: %if ptxas %{ llc < %s -mtriple=nvptx64-nvidia-nvcl -mcpu=sm_60 | %ptxas-verify %}
  
  target triple = "nvptx-unknown-nvcl"
  
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index d9050b7..780da28 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "e86910337f98e57f5b9253f7d80d5b916eb1d97e"
-    LLVM_SHA256 = "4ca0eff0ca86ed6f2fdb7682354fdf4c85151d90ac9fb6e55a868e4191359e9f"
+    LLVM_COMMIT = "59890c13343af9e308281b3c76bac425087f4f8a"
+    LLVM_SHA256 = "bd80d5cbc94225c4ac944bc22df7772d2eb6b1df3e123d992b331a1b097847d4"
 
     tf_http_archive(
         name = name,
